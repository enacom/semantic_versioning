{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Versionamento sem\u00e2ntico Refer\u00eancia: Semantic Versioning 2.0.0 Os n\u00fameros de vers\u00e3o Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima.","title":"Versionamento sem\u00e2ntico"},{"location":"#versionamento-semantico","text":"Refer\u00eancia: Semantic Versioning 2.0.0","title":"Versionamento sem\u00e2ntico"},{"location":"#os-numeros-de-versao","text":"Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima.","title":"Os n\u00fameros de vers\u00e3o"},{"location":"ambientes_branchs/","text":"Ambientes e branchs Gateway No Gateway os ambientes est\u00e3o relacionados \u00e0s branchs da seguinte maneira: Ambiente de devenvolvimento: branch develop Ambiente de homologa\u00e7\u00e3o: branch staging Ambiente de produ\u00e7\u00e3o: branch master branch master deveria se chamar main . Para uma mudan\u00e7a futura: Branch Management - Changing the master branch name Como atualizar os ambientes Ambiente de desenvolvimento Acesse o reposit\u00f3rio do gateway Mude para a branch develop : git checkout develop Atualize a branch develop : git pull Mude as vers\u00f5es das depend\u00eancias no arquivo requirements.txt Aceite as modifica\u00e7\u00f5es: git add requirements.txt Confirme as modifica\u00e7\u00f5es: git commit Escreva uma mensagem explicando as modifica\u00e7\u00f5es Publique as modifica\u00e7\u00f5es: git push A partir da publica\u00e7\u00e3o o pipeline do ambiente de desenvolvimento ser\u00e1 iniciado. Quando o pipeline for completado estar\u00e1 dispon\u00edvel um ambiente atualizado. Ambiente de homologa\u00e7\u00e3o Acesse o reposit\u00f3rio do gateway Mude para a branch staging : git checkout staging Atualize a branch staging : git pull Verifique qual a \u00faltima vers\u00e3o gerada: git tag Aten\u00e7\u00e3o \u00e0 ordem das vers\u00f5es, s\u00e3o ordenadas como texto. Exemplo, a \u00faltima vers\u00e3o \u00e9 a 3.11.5 e n\u00e3o a 3.9.0 : 3.1.0 3.10.0 3.11.0 3.11.1 3.11.2 3.11.3 3.11.4 3.11.5 3.2.0 3.3.0 3.4.0 3.5.0 3.6.0 3.7.0 3.8.0 3.9.0 Verifique a \u00faltima release que foi incorporada \u00e0 staging : git log Merge branch 'release/3.11.6' Finalize essa release se ela ainda estiver aberta para que os c\u00f3digos que est\u00e3o em homologa\u00e7\u00e3o possam ir para a produ\u00e7\u00e3o: git flow finish release 3.11.6 Uma nova etiqueta (com o n\u00famero da vers\u00e3o) ser\u00e1 gerada e \u00e9 muito importante public\u00e1-la: git push origin --tags 3 .11.5 -> 3 .11.5 Inicie uma nova release para que os c\u00f3digos que est\u00e3o em desenvolvimento possam ir para homologa\u00e7\u00e3o: git flow start release 3.12.0 , considerando uma nova funcionalidade mantendo compatibilidade. Incorpore a nova release \u00e0 staging : git merge release/3.12.0 Publique as branchs atualizadas: git push --all develop -> develop staging -> staging master -> master A partir da publica\u00e7\u00e3o o pipeline dos ambientes de desenvolvimento, homologa\u00e7\u00e3o e produ\u00e7\u00e3o ser\u00e3o iniciados. Quando os pipelines forem completados estar\u00e3o dispon\u00edveis ambientes atualizados. ATEN\u00c7\u00c3O AO VERSIONAMENTO SEM\u00c2NTICO! Refer\u00eancia: Semantic Versioning 2.0.0 Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima. Ambiente de produ\u00e7\u00e3o Acesse o reposit\u00f3rio do gateway Mude para a branch master : git checkout master Atualize a branch master : git pull Finalize a release aberta para que os c\u00f3digos que est\u00e3o em homologa\u00e7\u00e3o possam ir para a produ\u00e7\u00e3o: git flow finish release 3.12.0 Uma nova etiqueta (com o n\u00famero da vers\u00e3o) ser\u00e1 gerada e \u00e9 muito importante public\u00e1-la: git push origin --tags 3 .12.0 -> 3 .12.0 Publique as branchs atualizadas: git push --all master -> master A partir da publica\u00e7\u00e3o o pipeline do ambiente de produ\u00e7\u00e3o ser\u00e1 iniciado. Quando o pipeline for completado estar\u00e1 dispon\u00edvel um ambiente atualizado.","title":"Ambientes e branchs"},{"location":"ambientes_branchs/#ambientes-e-branchs","text":"","title":"Ambientes e branchs"},{"location":"ambientes_branchs/#gateway","text":"No Gateway os ambientes est\u00e3o relacionados \u00e0s branchs da seguinte maneira: Ambiente de devenvolvimento: branch develop Ambiente de homologa\u00e7\u00e3o: branch staging Ambiente de produ\u00e7\u00e3o: branch master branch master deveria se chamar main . Para uma mudan\u00e7a futura: Branch Management - Changing the master branch name","title":"Gateway"},{"location":"ambientes_branchs/#como-atualizar-os-ambientes","text":"","title":"Como atualizar os ambientes"},{"location":"ambientes_branchs/#ambiente-de-desenvolvimento","text":"Acesse o reposit\u00f3rio do gateway Mude para a branch develop : git checkout develop Atualize a branch develop : git pull Mude as vers\u00f5es das depend\u00eancias no arquivo requirements.txt Aceite as modifica\u00e7\u00f5es: git add requirements.txt Confirme as modifica\u00e7\u00f5es: git commit Escreva uma mensagem explicando as modifica\u00e7\u00f5es Publique as modifica\u00e7\u00f5es: git push A partir da publica\u00e7\u00e3o o pipeline do ambiente de desenvolvimento ser\u00e1 iniciado. Quando o pipeline for completado estar\u00e1 dispon\u00edvel um ambiente atualizado.","title":"Ambiente de desenvolvimento"},{"location":"ambientes_branchs/#ambiente-de-homologacao","text":"Acesse o reposit\u00f3rio do gateway Mude para a branch staging : git checkout staging Atualize a branch staging : git pull Verifique qual a \u00faltima vers\u00e3o gerada: git tag Aten\u00e7\u00e3o \u00e0 ordem das vers\u00f5es, s\u00e3o ordenadas como texto. Exemplo, a \u00faltima vers\u00e3o \u00e9 a 3.11.5 e n\u00e3o a 3.9.0 : 3.1.0 3.10.0 3.11.0 3.11.1 3.11.2 3.11.3 3.11.4 3.11.5 3.2.0 3.3.0 3.4.0 3.5.0 3.6.0 3.7.0 3.8.0 3.9.0 Verifique a \u00faltima release que foi incorporada \u00e0 staging : git log Merge branch 'release/3.11.6' Finalize essa release se ela ainda estiver aberta para que os c\u00f3digos que est\u00e3o em homologa\u00e7\u00e3o possam ir para a produ\u00e7\u00e3o: git flow finish release 3.11.6 Uma nova etiqueta (com o n\u00famero da vers\u00e3o) ser\u00e1 gerada e \u00e9 muito importante public\u00e1-la: git push origin --tags 3 .11.5 -> 3 .11.5 Inicie uma nova release para que os c\u00f3digos que est\u00e3o em desenvolvimento possam ir para homologa\u00e7\u00e3o: git flow start release 3.12.0 , considerando uma nova funcionalidade mantendo compatibilidade. Incorpore a nova release \u00e0 staging : git merge release/3.12.0 Publique as branchs atualizadas: git push --all develop -> develop staging -> staging master -> master A partir da publica\u00e7\u00e3o o pipeline dos ambientes de desenvolvimento, homologa\u00e7\u00e3o e produ\u00e7\u00e3o ser\u00e3o iniciados. Quando os pipelines forem completados estar\u00e3o dispon\u00edveis ambientes atualizados.","title":"Ambiente de homologa\u00e7\u00e3o"},{"location":"ambientes_branchs/#atencao-ao-versionamento-semantico","text":"Refer\u00eancia: Semantic Versioning 2.0.0 Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima.","title":"ATEN\u00c7\u00c3O AO VERSIONAMENTO SEM\u00c2NTICO!"},{"location":"ambientes_branchs/#ambiente-de-producao","text":"Acesse o reposit\u00f3rio do gateway Mude para a branch master : git checkout master Atualize a branch master : git pull Finalize a release aberta para que os c\u00f3digos que est\u00e3o em homologa\u00e7\u00e3o possam ir para a produ\u00e7\u00e3o: git flow finish release 3.12.0 Uma nova etiqueta (com o n\u00famero da vers\u00e3o) ser\u00e1 gerada e \u00e9 muito importante public\u00e1-la: git push origin --tags 3 .12.0 -> 3 .12.0 Publique as branchs atualizadas: git push --all master -> master A partir da publica\u00e7\u00e3o o pipeline do ambiente de produ\u00e7\u00e3o ser\u00e1 iniciado. Quando o pipeline for completado estar\u00e1 dispon\u00edvel um ambiente atualizado.","title":"Ambiente de produ\u00e7\u00e3o"},{"location":"pratica/","text":"Pr\u00e1tica Refer\u00eancia: Semantic Versioning 2.0.0 1. Os n\u00fameros de vers\u00e3o Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima. 2. Clonar reposit\u00f3rios de exemplo Usar chave SSH git clone git@github.com:enacom/simplified_example.git git clone git@github.com:enacom/customized_example.git git clone git@github.com:enacom/gateway_example.git Usar URL git clone https://github.com/enacom/simplified_example.git git clone https://github.com/enacom/customized_example.git git clone https://github.com/enacom/gateway_example.git 3. Inicializar GitFlow Refer\u00eancia: https://danielkummer.github.io/git-flow-cheatsheet/ Acessar um diret\u00f3rio dos reposit\u00f3rios de exemplo e iniciar o git flow com branchs com nomenclatura padr\u00e3o (usar op\u00e7\u00e3o --defaults ) cd gateway_example/ git flow init --defaults GitFlow j\u00e1 inicializado git flow init --defaults Already initialized for gitflow. To force reinitialization, use: git flow init -f N\u00e3o \u00e9 necess\u00e1rio reinicializar o GitFlow, a menos que queria redefinir os nomes das branchs . GitFlow sem inicializar git flow init --defaults Using default branch names. Which branch should be used for bringing forth production releases? - main Branch name for production releases: [ main ] Branch name for \"next release\" development: [ develop ] How to name your supporting branch prefixes? Feature branches? [ feature/ ] Bugfix branches? [ bugfix/ ] Release branches? [ release/ ] Hotfix branches? [ hotfix/ ] Support branches? [ support/ ] Version tag prefix? [] Hooks and filters directory? [ .../.git/hooks ] Em hooks e filtros ... corresponde ao caminho absoluto do reposit\u00f3rio. 4. Desenvolvimento de uma nova funcionalidade Criar nova branch em feature nova funcionalidade, de documenta\u00e7\u00e3o, por exemplo. git flow feature start documentation Ambiente virtual e MkDocs V\u00eddeos e documenta\u00e7\u00f5es de refer\u00eancia: Poetry: Gerenciando pacotes e ambientes com Poetry - Live de Python #179 Documenta\u00e7\u00e3o do Poetry MkDocs e tema Material Documentado projetos com MkDocs - Live de Python #189 Cria\u00e7\u00e3o do site com o tema Material Configura\u00e7\u00e3o do MkDocs Inicializar o ambiente virtual com poetry poetry init --no-interaction Ser\u00e1 criado o arquivo de configura\u00e7\u00e3o pyproject.toml Edite o arquivo pyproject.toml e atualize os metadados sempre que mudar a vers\u00e3o. Ativar o ambiente virtual poetry shell Adicionar as depend\u00eancias poetry add MkDocs MkDocs-material Instalar as depend\u00eancias poetry install Criar novo projeto de documenta\u00e7\u00e3o, a partir do diret\u00f3rio corrente MkDocs new . Ser\u00e1 criado o diret\u00f3rio docs e o arquivo de configura\u00e7\u00e3o mkdocs.yml . Editar o mkdocs.yml e incluir ou atualizar as configura\u00e7\u00f5es das p\u00e1ginas de documenta\u00e7\u00e3o. Caso j\u00e1 exista o arquivo de configura\u00e7\u00e3o, ser\u00e1 informado que o projeto j\u00e1 exite MkDocs new . INFO - Project already exists. Editar o arquivo docs/index.md com os dados principais da documenta\u00e7\u00e3o. Criar outros arquivos no diret\u00f3rio docs para organizar melhor os assuntos. Desenvolvimento e controle de vers\u00e3o Desenvolver a funcionalidade, visualizar e adicionar as mudan\u00e7as git add docs mkdocs.yml Confirmar as mudan\u00e7as para uma nova vers\u00e3o git commit Um editor de texto ir\u00e1 abrir para colocar uma mensagem clara sobre as mudan\u00e7as. Acesse alterar o editor padr\u00e3o do git , caso queira mudar o editor para incluir as mensagem de commit . Publicar as mudan\u00e7as git flow feature publish documentation Testar e finalizar a feature git flow feature finish documentation Merge branch 'feature/documentation' into develop Resolver poss\u00edveis conflitos com a branch develop Publicar as mudan\u00e7as na develop git push Se a branch develop n\u00e3o existir remotamente ser\u00e1 necess\u00e1rio definir a refer\u00eancia no reposit\u00f3rio remoto git push --set-upstream origin develop 5. Criar uma nova vers\u00e3o Gerar uma nova release de acordo com a versionamento sem\u00e2ntico MAJOR . minor .patch. Como estamos adicionando uma nova funcionalidade mantendo compatibilidade, alteramos o minor . git flow release start v0.1.0 Publicar a nova release git flow release publish v0.1.0 Caso sejam necess\u00e1rias corre\u00e7\u00f5es, de acordo com o versionamento sem\u00e2ntico temos que alterar o patch da vers\u00e3o. Exemplo: v0.1.1 . Na ENACOM utilizamos a branch staging para a vers\u00e3o de homologa\u00e7\u00e3o, portanto \u00e9 necess\u00e1rio criar, atualizar com a release atual e publicar essa branch. Acessar a branch staging git checkout staging Caso ela n\u00e3o exista, criar branch staging git branch staging Todas as mudan\u00e7as na release precisam ir para a staging tamb\u00e9m. git merge release/v0.1.0 Publicar as mudan\u00e7as na staging git push Se a branch staging n\u00e3o existir remotamente ser\u00e1 necess\u00e1rio definir a refer\u00eancia no reposit\u00f3rio remoto git push --set-upstream origin staging Homologar a nova funcionalidade e finalizar a vers\u00e3o git flow release finish v0.1.0 Escrever uma mensagem simples e explicativa das mudan\u00e7as da release! Publicar as tags git push origin --tags Publicar todas as mudan\u00e7as git checkout develop git push git checkout staging git push git checkout main git push Atualizar a vers\u00e3o de desenvolvimento No in\u00edcio de um novo desenvolvimento \u00e9 importante atualizar a vers\u00e3o semanticamente no arquivo de configura\u00e7\u00e3o pyproject.toml . Podemos aproveitar para melhorar os metadados do projeto tamb\u00e9m!","title":"Pr\u00e1tica"},{"location":"pratica/#pratica","text":"Refer\u00eancia: Semantic Versioning 2.0.0","title":"Pr\u00e1tica"},{"location":"pratica/#1-os-numeros-de-versao","text":"Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima.","title":"1. Os n\u00fameros de vers\u00e3o"},{"location":"pratica/#2-clonar-repositorios-de-exemplo","text":"","title":"2. Clonar reposit\u00f3rios de exemplo"},{"location":"pratica/#usar-chave-ssh","text":"git clone git@github.com:enacom/simplified_example.git git clone git@github.com:enacom/customized_example.git git clone git@github.com:enacom/gateway_example.git","title":"Usar chave SSH"},{"location":"pratica/#usar-url","text":"git clone https://github.com/enacom/simplified_example.git git clone https://github.com/enacom/customized_example.git git clone https://github.com/enacom/gateway_example.git","title":"Usar URL"},{"location":"pratica/#3-inicializar-gitflow","text":"Refer\u00eancia: https://danielkummer.github.io/git-flow-cheatsheet/ Acessar um diret\u00f3rio dos reposit\u00f3rios de exemplo e iniciar o git flow com branchs com nomenclatura padr\u00e3o (usar op\u00e7\u00e3o --defaults ) cd gateway_example/ git flow init --defaults","title":"3. Inicializar GitFlow"},{"location":"pratica/#gitflow-ja-inicializado","text":"git flow init --defaults Already initialized for gitflow. To force reinitialization, use: git flow init -f N\u00e3o \u00e9 necess\u00e1rio reinicializar o GitFlow, a menos que queria redefinir os nomes das branchs .","title":"GitFlow j\u00e1 inicializado"},{"location":"pratica/#gitflow-sem-inicializar","text":"git flow init --defaults Using default branch names. Which branch should be used for bringing forth production releases? - main Branch name for production releases: [ main ] Branch name for \"next release\" development: [ develop ] How to name your supporting branch prefixes? Feature branches? [ feature/ ] Bugfix branches? [ bugfix/ ] Release branches? [ release/ ] Hotfix branches? [ hotfix/ ] Support branches? [ support/ ] Version tag prefix? [] Hooks and filters directory? [ .../.git/hooks ] Em hooks e filtros ... corresponde ao caminho absoluto do reposit\u00f3rio.","title":"GitFlow sem inicializar"},{"location":"pratica/#4-desenvolvimento-de-uma-nova-funcionalidade","text":"Criar nova branch em feature nova funcionalidade, de documenta\u00e7\u00e3o, por exemplo. git flow feature start documentation","title":"4. Desenvolvimento de uma nova funcionalidade"},{"location":"pratica/#ambiente-virtual-e-mkdocs","text":"V\u00eddeos e documenta\u00e7\u00f5es de refer\u00eancia: Poetry: Gerenciando pacotes e ambientes com Poetry - Live de Python #179 Documenta\u00e7\u00e3o do Poetry MkDocs e tema Material Documentado projetos com MkDocs - Live de Python #189 Cria\u00e7\u00e3o do site com o tema Material Configura\u00e7\u00e3o do MkDocs Inicializar o ambiente virtual com poetry poetry init --no-interaction Ser\u00e1 criado o arquivo de configura\u00e7\u00e3o pyproject.toml Edite o arquivo pyproject.toml e atualize os metadados sempre que mudar a vers\u00e3o. Ativar o ambiente virtual poetry shell Adicionar as depend\u00eancias poetry add MkDocs MkDocs-material Instalar as depend\u00eancias poetry install Criar novo projeto de documenta\u00e7\u00e3o, a partir do diret\u00f3rio corrente MkDocs new . Ser\u00e1 criado o diret\u00f3rio docs e o arquivo de configura\u00e7\u00e3o mkdocs.yml . Editar o mkdocs.yml e incluir ou atualizar as configura\u00e7\u00f5es das p\u00e1ginas de documenta\u00e7\u00e3o. Caso j\u00e1 exista o arquivo de configura\u00e7\u00e3o, ser\u00e1 informado que o projeto j\u00e1 exite MkDocs new . INFO - Project already exists. Editar o arquivo docs/index.md com os dados principais da documenta\u00e7\u00e3o. Criar outros arquivos no diret\u00f3rio docs para organizar melhor os assuntos.","title":"Ambiente virtual e MkDocs"},{"location":"pratica/#desenvolvimento-e-controle-de-versao","text":"Desenvolver a funcionalidade, visualizar e adicionar as mudan\u00e7as git add docs mkdocs.yml Confirmar as mudan\u00e7as para uma nova vers\u00e3o git commit Um editor de texto ir\u00e1 abrir para colocar uma mensagem clara sobre as mudan\u00e7as. Acesse alterar o editor padr\u00e3o do git , caso queira mudar o editor para incluir as mensagem de commit . Publicar as mudan\u00e7as git flow feature publish documentation Testar e finalizar a feature git flow feature finish documentation Merge branch 'feature/documentation' into develop Resolver poss\u00edveis conflitos com a branch develop Publicar as mudan\u00e7as na develop git push Se a branch develop n\u00e3o existir remotamente ser\u00e1 necess\u00e1rio definir a refer\u00eancia no reposit\u00f3rio remoto git push --set-upstream origin develop","title":"Desenvolvimento e controle de vers\u00e3o"},{"location":"pratica/#5-criar-uma-nova-versao","text":"Gerar uma nova release de acordo com a versionamento sem\u00e2ntico MAJOR . minor .patch. Como estamos adicionando uma nova funcionalidade mantendo compatibilidade, alteramos o minor . git flow release start v0.1.0 Publicar a nova release git flow release publish v0.1.0 Caso sejam necess\u00e1rias corre\u00e7\u00f5es, de acordo com o versionamento sem\u00e2ntico temos que alterar o patch da vers\u00e3o. Exemplo: v0.1.1 . Na ENACOM utilizamos a branch staging para a vers\u00e3o de homologa\u00e7\u00e3o, portanto \u00e9 necess\u00e1rio criar, atualizar com a release atual e publicar essa branch. Acessar a branch staging git checkout staging Caso ela n\u00e3o exista, criar branch staging git branch staging Todas as mudan\u00e7as na release precisam ir para a staging tamb\u00e9m. git merge release/v0.1.0 Publicar as mudan\u00e7as na staging git push Se a branch staging n\u00e3o existir remotamente ser\u00e1 necess\u00e1rio definir a refer\u00eancia no reposit\u00f3rio remoto git push --set-upstream origin staging Homologar a nova funcionalidade e finalizar a vers\u00e3o git flow release finish v0.1.0 Escrever uma mensagem simples e explicativa das mudan\u00e7as da release! Publicar as tags git push origin --tags Publicar todas as mudan\u00e7as git checkout develop git push git checkout staging git push git checkout main git push","title":"5. Criar uma nova vers\u00e3o"},{"location":"pratica/#atualizar-a-versao-de-desenvolvimento","text":"No in\u00edcio de um novo desenvolvimento \u00e9 importante atualizar a vers\u00e3o semanticamente no arquivo de configura\u00e7\u00e3o pyproject.toml . Podemos aproveitar para melhorar os metadados do projeto tamb\u00e9m!","title":"Atualizar a vers\u00e3o de desenvolvimento"},{"location":"roteiro/","text":"Roteiro Refer\u00eancia: Semantic Versioning 2.0.0 1. Os n\u00fameros de vers\u00e3o Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima. Hist\u00f3ria A: nova funcionalidade Hist\u00f3ria B: nova funcionalidade Hist\u00f3ria C: nova funcionalidade Hist\u00f3ria D: corre\u00e7\u00e3o de bug Hist\u00f3ria E: nova funcionalidade","title":"Roteiro"},{"location":"roteiro/#roteiro","text":"Refer\u00eancia: Semantic Versioning 2.0.0","title":"Roteiro"},{"location":"roteiro/#1-os-numeros-de-versao","text":"Dado um n\u00famero de vers\u00e3o MAJOR . MINOR .PATCH, incremente a: vers\u00e3o Maior(MAJOR): quando fizer mudan\u00e7as incompat\u00edveis na API, vers\u00e3o Menor(MINOR): quando adicionar funcionalidades mantendo compatibilidade, vers\u00e3o de Corre\u00e7\u00e3o(PATCH): quando corrigir falhas mantendo compatibilidade. Sob este esquema, os n\u00fameros de vers\u00e3o e a forma como eles mudam transmitem o significado do c\u00f3digo subjacente e o que foi modificado de uma vers\u00e3o para a pr\u00f3xima.","title":"1. Os n\u00fameros de vers\u00e3o"},{"location":"roteiro/#historia-a-nova-funcionalidade","text":"","title":"Hist\u00f3ria A: nova funcionalidade"},{"location":"roteiro/#historia-b-nova-funcionalidade","text":"","title":"Hist\u00f3ria B: nova funcionalidade"},{"location":"roteiro/#historia-c-nova-funcionalidade","text":"","title":"Hist\u00f3ria C: nova funcionalidade"},{"location":"roteiro/#historia-d-correcao-de-bug","text":"","title":"Hist\u00f3ria D: corre\u00e7\u00e3o de bug"},{"location":"roteiro/#historia-e-nova-funcionalidade","text":"","title":"Hist\u00f3ria E: nova funcionalidade"}]}